libcas provides a C API to the CAS1 and CAS2 (2011-06-20) protocols.

Compilation and install is as expected:
./configure && make && make install

However, it is *strongly* recommended to do out-of-directory building:
mkdir ../libcas-build && cd ../libcas-build && ../libcas/configure && make && make install

This will install libcas in /usr/local/lib and clicas in /usr/local/bin .

Note that tests can be run using "make check", but require "nc" and "openssl" command line
	utilities to be installed.
	
Examples can be found in the /examples directory of the distribution.

Basic library usage is as follows:

	#include ...

//-- Include CAS public header
	#include "../src/cas.h"								
	
	...

//-- Init libcas *once* per process
	cas_init();											

//-- Obtain new CAS handle, not to be shared across threads
	CAS* cas=cas_new();									

//-- (Optional) Enable certificate validation (default)
	cas_set_ssl_validate_server(cas,1);					

//-- (Optional) Set SSL Certificate location
	cas_set_ssl_ca(cas,"/etc/ssl/certs");				

//-- CAS2 Validation Function
//--   (CAS Handle,Validation URL,Escaped Service,Ticket,Renew Flag)
	CAS_CODE code=cas_cas2_servicevalidate(				
		cas,											
		"http://localhost:12345/cas/serviceValidate",   
		"http%3a%2f%2flocalhost%2f",					
		cas_service_ticket,								
		0);												

//-- Check return code
	if( code==CAS_VALIDATION_SUCCESS ) {

//--  Retrieve principal from response
		char* p=cas_get_principal( cas );
	} else {

//-- Retrieve error message from response
		char* m=cas_get_message(cas);
	}

//-- Destroy handle	
	cas_zap( cas );

//-- Destroy libcas session
	cas_destroy();


Alternatively, if you would like to proxy authentication to another service usage is as follows:

//-- Initialize new CAS handle the same as above
	cas_init();											
	CAS* cas=cas_new();
	
//-- (Required) Enable validation and set certificate is required when proxying authenticaiton
	cas_set_ssl_validate_server(cas,1);					
	cas_set_ssl_ca(cas,"/etc/ssl/certs");				
	

//-- CAS2 Validation Function
//--   (CAS Handle,Validation URL,Escaped Service,Ticket,Renew Flag)
	CAS_CODE code=cas_cas2_serviceValidate_proxyTicketing(				
		cas,											
		"http://localhost:12345/cas/serviceValidate",   
		"http%3a%2f%2flocalhost%2f",					
		cas_service_ticket,								
		0),
		"http%3a%2f%2fcallbackurl%2f/receive_pgt",
		"http://callbackurl/retrieve_pgt";												

//-- Check return code
	if( code==CAS_VALIDATION_SUCCESS ) {

//-- Get proxy granting ticket
		char* pgt = cas_get_pgt( cas );
		
		if (pgt != NULL) {
		
//--  Obtain proxy ticket from server
			code = cas_cas2_proxy( cas, "http://localhost:12345/proxy", ""http%3a%2f%2ftargetService%2f/resource"", pgt);
			if ( code==CAS_PROXY_SUCCESS ) {
				char* proxy_ticket = cas_get_proxy_ticket(cas);
			}
		}
	} else {

//-- Retrieve error message from response
		char* m=cas_get_message(cas);
	}

//-- Destroy handle	
	cas_zap( cas );

//-- Destroy libcas session
	cas_destroy();
